{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { ChevronRight16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { match, keys } from '../../internal/keyboard';\nvar prefix = settings.prefix;\n\nvar defaultRenderExpando = function defaultRenderExpando(props) {\n  return React.createElement(\"button\", props);\n};\n\nfunction AccordionItem(_ref) {\n  var _cx;\n\n  var children = _ref.children,\n      customClassName = _ref.className,\n      _ref$iconDescription = _ref.iconDescription,\n      iconDescription = _ref$iconDescription === void 0 ? 'Expand/Collapse' : _ref$iconDescription,\n      _ref$open = _ref.open,\n      open = _ref$open === void 0 ? false : _ref$open,\n      onHeadingClick = _ref.onHeadingClick,\n      _ref$renderExpando = _ref.renderExpando,\n      Expando = _ref$renderExpando === void 0 ? defaultRenderExpando : _ref$renderExpando,\n      _ref$title = _ref.title,\n      title = _ref$title === void 0 ? 'title' : _ref$title,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"iconDescription\", \"open\", \"onHeadingClick\", \"renderExpando\", \"title\"]);\n\n  var _useState = useState(open),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var _useState3 = useState(open),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevIsOpen = _useState4[0],\n      setPrevIsOpen = _useState4[1];\n\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--accordion__item\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--accordion__item--active\"), isOpen), _defineProperty(_cx, customClassName, !!customClassName), _cx));\n\n  if (open !== prevIsOpen) {\n    setIsOpen(open);\n    setPrevIsOpen(open);\n  } // When the AccordionItem heading is clicked, toggle the open state of the\n  // panel\n\n\n  function onClick(event) {\n    var nextValue = !isOpen;\n    setIsOpen(nextValue);\n\n    if (onHeadingClick) {\n      // TODO: normalize signature, potentially:\n      // onHeadingClick :: (event: Event, state: { isOpen: Boolean }) => any\n      onHeadingClick({\n        isOpen: nextValue,\n        event: event\n      });\n    }\n  } // If the AccordionItem is open, and the user hits the ESC key, then close it\n\n\n  function onKeyDown(event) {\n    if (isOpen && match(event, keys.Escape)) {\n      setIsOpen(false);\n    }\n  }\n\n  return React.createElement(\"li\", _extends({\n    className: className\n  }, rest), React.createElement(Expando, {\n    \"aria-expanded\": isOpen,\n    className: \"\".concat(prefix, \"--accordion__heading\"),\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    title: iconDescription,\n    type: \"button\"\n  }, React.createElement(ChevronRight16, {\n    \"aria-label\": iconDescription,\n    className: \"\".concat(prefix, \"--accordion__arrow\")\n  }), React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--accordion__title\")\n  }, title)), React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--accordion__content\")\n  }, children));\n}\n\nAccordionItem.propTypes = {\n  /**\n   * Provide the contents of your AccordionItem\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * The accordion title.\n   */\n  title: PropTypes.node,\n\n  /**\n   * The callback function to render the expando button.\n   * Can be a React component class.\n   */\n  renderExpando: PropTypes.func,\n\n  /**\n   * The description of the expando icon.\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * `true` to open the expando.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The handler of the massaged `click` event.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * The handler of the massaged `click` event on the heading.\n   */\n  onHeadingClick: PropTypes.func\n};\nexport default AccordionItem;","map":null,"metadata":{},"sourceType":"module"}