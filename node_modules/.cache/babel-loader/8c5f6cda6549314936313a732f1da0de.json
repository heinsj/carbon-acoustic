{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React from 'react';\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { AriaLabelPropType } from '../../prop-types/AriaPropTypes';\nvar prefix = settings.prefix;\n\nvar HeaderPanel = function HeaderPanel(_ref) {\n  var _cx;\n\n  var ariaLabel = _ref['aria-label'],\n      ariaLabelledBy = _ref['aria-labelledby'],\n      children = _ref.children,\n      customClassName = _ref.className,\n      expanded = _ref.expanded,\n      other = _objectWithoutProperties(_ref, [\"aria-label\", \"aria-labelledby\", \"children\", \"className\", \"expanded\"]);\n\n  var accessibilityLabel = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  };\n  var className = cx(\"\".concat(prefix, \"--header-panel\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--header-panel--expanded\"), expanded), _defineProperty(_cx, customClassName, !!customClassName), _cx));\n  return React.createElement(\"div\", _extends({}, other, {\n    className: className\n  }, accessibilityLabel), children);\n};\n\nHeaderPanel.propTypes = _objectSpread({}, AriaLabelPropType, {\n  /**\n   * Optionally provide a custom class to apply to the underlying <li> node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the panel is expanded\n   */\n  expanded: PropTypes.bool\n});\nexport default HeaderPanel;","map":null,"metadata":{},"sourceType":"module"}